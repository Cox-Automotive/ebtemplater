#!/usr/bin/env node
'use strict';

process.title = 'ebtemplater';

var path     = require('path'),
    async    = require('async'),
    clc      = require('cli-color'),
    _        = require('underscore'),
    program  = require('commander'),
    yaml     = require('js-yaml'),
    lodash   = require('lodash.merge'),
    fs       = require('fs'),
    pkg      = require(path.join(__dirname, '../', 'package.json'));

var Extend = function(filePath){
    this.klass = 'Extend';
    this.filePath = filePath;
};

var ExtendYamlType = new yaml.Type('!extend', {
    kind: 'mapping',
    construct: function(data){
        data = data || {};
        return new Extend(data.filePath);
    },
    instanceOf: Extend
});

var ExtendSchema = yaml.Schema.create([ ExtendYamlType ]);

program
    .version(pkg.version)
    .description('Provides inheritance for Elastic Beanstalk configurations')
    .parse(process.argv);

if(process.stdout.isTTY){
    console.error(clc.whiteBright.bold('%s v%s'), process.title, pkg.version);
}

if(!program.args.length) program.help();

var yamlFilePath = program.args[0];

if(!fs.existsSync(yamlFilePath)){
    utils.errorAndExit('File not found: ' + yamlFilePath);
}

var yamlSource = fs.readFileSync(yamlFilePath);
if(!yamlSource){
    utils.errorAndExit('Error reading file: ' + yamlFilePath);
}

var loaded = yaml.load(yamlSource, { schema: ExtendSchema }),
    merged = loaded;

_.each(loaded.extends, function(extend){
    console.log('reading: %s', extend.filePath);
    var extendSource = fs.readFileSync(extend.filePath);
    if(!extendSource){
        utils.errorAndExit('Could not find referenced YAML: ' + extend.filePath);
    }
    lodash(merged, yaml.load(extendSource));
});

delete merged.extends;

// add magic data
merged['EnvironmentConfigurationMetadata'] = {
  'Description':  'Configuration automagically generated by ' + pkg.name,
  'DateCreated':  new String(new Date().getTime()),
  'DateModified': new String(new Date().getTime())
};

console.log('\nGenerated YAML:\n' + JSON.stringify(merged, null, 4));