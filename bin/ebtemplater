#!/usr/bin/env node
'use strict';

process.title = 'ebtemplater';

var path     = require('path'),
    async    = require('async'),
    clc      = require('cli-color'),
    _        = require('underscore'),
    program  = require('commander'),
    yaml     = require('js-yaml'),
    lodash   = require('lodash.merge'),
    fs       = require('fs'),
    utils    = require('../lib/utils'),
    pkg      = require(path.join(__dirname, '../', 'package.json'));

var Extend = function(filePath){
    this.klass = 'Extend';
    this.filePath = filePath;
};

var ExtendYamlType = new yaml.Type('!extend', {
    kind: 'mapping',
    construct: function(data){
        data = data || {};
        return new Extend(data.filePath);
    },
    instanceOf: Extend
});

var ExtendSchema = yaml.Schema.create([ ExtendYamlType ]);

function processYamlInheritance(yamlFile){
    var obj = {};
    try{
        if(log) console.log(clc.cyan('Parsing yaml: %s'), yamlFile);
        var yamlSource = fs.readFileSync(yamlFile),
            obj        = yaml.load(yamlSource, { schema: ExtendSchema });

        _.each(obj.extends, function(extend){
            if(log) console.log(clc.cyan('Reading dependency: %s'), extend.filePath);
            lodash(obj, processYamlInheritance(extend.filePath));
        });
    }
    catch(e){
        utils.errorAndExit('Error reading file: ' + yamlFile, e);
    }

    delete obj.extends;
    return obj;
}

program
    .version(pkg.version)
    .description('Provides inheritance for Elastic Beanstalk configurations')
    .option('-o, --output <output-file>', 'output file to save to', 'output.config.yml')
    .option('-v, --verbose (true|false) [false]', false)
    .parse(process.argv);

if(process.stdout.isTTY){
    console.error(clc.whiteBright.bold('%s v%s'), process.title, pkg.version);
}

if(!program.args.length) program.help();

var yamlFilePath = program.args[0],
    log          = !!program.verbose;

if(!fs.existsSync(yamlFilePath)){
    utils.errorAndExit('File not found: ' + yamlFilePath);
}

var finalYml = processYamlInheritance(yamlFilePath);

// add magic data
finalYml['EnvironmentConfigurationMetadata'] = {
  'Description':  'Configuration automagically generated by ' + pkg.name,
  'DateCreated':  new String(new Date().getTime()),
  'DateModified': new String(new Date().getTime())
};

finalYml = [ '# Elastic Beanstalk Config - ', yamlFilePath.replace(/.yml/gi, ''),
             '\n# This file is automagically generated by ', pkg.name,
             '. Do not modify!\n', '# More information: ', pkg.repository.url, '\n',
             yaml.safeDump(finalYml, { lineWidth: 100 }) ].join('');

console.log(clc.white('YAML generated as saved to: %s'), program.output);
fs.writeFileSync(program.output, finalYml);

utils.checkForUpdate();